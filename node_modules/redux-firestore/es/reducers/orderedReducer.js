"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = orderedReducer;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread6 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _merge2 = _interopRequireDefault(require("lodash/fp/merge"));

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _keyBy2 = _interopRequireDefault(require("lodash/keyBy"));

var _map2 = _interopRequireDefault(require("lodash/map"));

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _reject2 = _interopRequireDefault(require("lodash/reject"));

var _unionBy2 = _interopRequireDefault(require("lodash/unionBy"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _size2 = _interopRequireDefault(require("lodash/size"));

var _constants = require("../constants");

var _reducers = require("../utils/reducers");

var _actionHandlers;

var DOCUMENT_ADDED = _constants.actionTypes.DOCUMENT_ADDED,
    GET_SUCCESS = _constants.actionTypes.GET_SUCCESS,
    LISTENER_RESPONSE = _constants.actionTypes.LISTENER_RESPONSE,
    CLEAR_DATA = _constants.actionTypes.CLEAR_DATA,
    DELETE_SUCCESS = _constants.actionTypes.DELETE_SUCCESS,
    DOCUMENT_REMOVED = _constants.actionTypes.DOCUMENT_REMOVED,
    DOCUMENT_MODIFIED = _constants.actionTypes.DOCUMENT_MODIFIED;

function modifyDoc(collectionState, action) {
  if (!action.meta.subcollections || action.meta.storeAs) {
    return (0, _reducers.updateItemInArray)(collectionState, action.meta.doc, function (item) {
      return (0, _merge2.default)(item, action.payload.data);
    });
  }

  var _pathToArr = (0, _reducers.pathToArr)(action.meta.path),
      _pathToArr2 = (0, _slicedToArray2.default)(_pathToArr, 4),
      docId = _pathToArr2[1],
      subcollectionName = _pathToArr2[2],
      subDocId = _pathToArr2[3];

  return (0, _reducers.updateItemInArray)(collectionState, docId, function (item) {
    return (0, _objectSpread6.default)({}, item, (0, _defineProperty2.default)({}, subcollectionName, (0, _reducers.updateItemInArray)((0, _get2.default)(item, subcollectionName, []), subDocId, function (subitem) {
      return (0, _merge2.default)(subitem, action.payload.data);
    })));
  });
}

function addDoc() {
  var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var action = arguments.length > 1 ? arguments[1] : undefined;
  var meta = action.meta,
      payload = action.payload;

  if (!meta.subcollections || meta.storeAs) {
    return (0, _toConsumableArray2.default)(array.slice(0, payload.ordered.newIndex)).concat([(0, _objectSpread6.default)({
      id: meta.doc
    }, payload.data)], (0, _toConsumableArray2.default)(array.slice(payload.ordered.newIndex)));
  }

  return modifyDoc(array, action);
}

function removeDoc(array, action) {
  if (!action.meta.subcollections || action.meta.storeAs) {
    return (0, _reject2.default)(array, {
      id: action.meta.doc
    });
  }

  var subcollectionSetting = action.meta.subcollections[0];

  if (!subcollectionSetting.doc) {
    return (0, _reducers.updateItemInArray)(array, action.meta.doc, function (item) {
      return (0, _omit2.default)(item, [subcollectionSetting.collection]);
    });
  }

  return (0, _reducers.updateItemInArray)(array, action.meta.doc, function (item) {
    var subcollectionVal = (0, _get2.default)(item, subcollectionSetting.collection, []);

    if (subcollectionVal.length) {
      return (0, _objectSpread6.default)({}, item, (0, _defineProperty2.default)({}, subcollectionSetting.collection, (0, _reject2.default)(array, {
        id: subcollectionSetting.doc
      })));
    }

    return item;
  });
}

function writeCollection(collectionState, action) {
  var meta = action.meta,
      _action$merge = action.merge,
      merge = _action$merge === void 0 ? {
    doc: true,
    collections: true
  } : _action$merge;

  if (meta.storeAs) {
    return action.payload.ordered;
  }

  var collectionStateSize = (0, _size2.default)(collectionState);
  var payloadExists = !!(0, _size2.default)(action.payload.ordered);

  if (meta.doc && merge.doc && collectionStateSize) {
    return modifyDoc(collectionState, action);
  }

  if (collectionStateSize && merge.collections) {
    if (!payloadExists) {
      return [];
    }

    var existingKeys = collectionState && (0, _keyBy2.default)(collectionState, 'id');
    return (0, _map2.default)(action.payload.ordered, function (newDocObj) {
      var existingDoc = (0, _get2.default)(existingKeys, newDocObj.id);
      return !!existingDoc && !(0, _isEqual2.default)(existingDoc, newDocObj) ? (0, _objectSpread6.default)({}, existingDoc, newDocObj) : newDocObj;
    });
  }

  if (meta.doc && meta.subcollections) {
    var subcollectionConfig = meta.subcollections[0];

    if (!collectionStateSize) {
      return [(0, _defineProperty2.default)({
        id: meta.doc
      }, subcollectionConfig.collection, action.payload.ordered)];
    }

    return (0, _reducers.updateItemInArray)(collectionState, meta.doc, function (item) {
      return payloadExists ? (0, _objectSpread6.default)({}, item, (0, _defineProperty2.default)({}, subcollectionConfig.collection, (0, _unionBy2.default)((0, _get2.default)(item, subcollectionConfig.collection, []), action.payload.ordered, 'id'))) : (0, _omit2.default)(item, [subcollectionConfig.collection]);
    });
  }

  if (meta.doc && collectionStateSize) {
    return (0, _reducers.updateItemInArray)(collectionState, meta.doc, function (item) {
      return (0, _merge2.default)(item, action.payload.ordered[0]);
    });
  }

  return action.payload.ordered;
}

var actionHandlers = (_actionHandlers = {}, (0, _defineProperty2.default)(_actionHandlers, DOCUMENT_ADDED, addDoc), (0, _defineProperty2.default)(_actionHandlers, DOCUMENT_MODIFIED, modifyDoc), (0, _defineProperty2.default)(_actionHandlers, DOCUMENT_REMOVED, removeDoc), (0, _defineProperty2.default)(_actionHandlers, DELETE_SUCCESS, removeDoc), (0, _defineProperty2.default)(_actionHandlers, LISTENER_RESPONSE, writeCollection), (0, _defineProperty2.default)(_actionHandlers, GET_SUCCESS, writeCollection), _actionHandlers);
var orderedCollectionReducer = (0, _reducers.createReducer)(undefined, actionHandlers);

function orderedReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments.length > 1 ? arguments[1] : undefined;

  if (!action.type) {
    return state;
  }

  if (action.type === CLEAR_DATA) {
    if (action.preserve && action.preserve.ordered) {
      return (0, _reducers.preserveValuesFromState)(state, action.preserve.ordered, {});
    }

    return {};
  }

  if (!Object.prototype.hasOwnProperty.call(actionHandlers, action.type)) {
    return state;
  }

  if (!action.meta || !action.meta.storeAs && !action.meta.collection) {
    return state;
  }

  var storeUnderKey = action.meta.storeAs || action.meta.collection;
  var collectionStateSlice = (0, _get2.default)(state, storeUnderKey);
  return (0, _objectSpread6.default)({}, state, (0, _defineProperty2.default)({}, storeUnderKey, orderedCollectionReducer(collectionStateSlice, action)));
}