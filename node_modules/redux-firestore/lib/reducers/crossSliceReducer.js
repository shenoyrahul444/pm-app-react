"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = crossSliceReducer;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _set2 = _interopRequireDefault(require("lodash/set"));

var _merge2 = _interopRequireDefault(require("lodash/merge"));

var _groupBy2 = _interopRequireDefault(require("lodash/groupBy"));

var _values2 = _interopRequireDefault(require("lodash/values"));

var _immer = _interopRequireDefault(require("immer"));

var _constants = require("../constants");

function crossSliceReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments.length > 1 ? arguments[1] : undefined;
  return (0, _immer.default)(state, function (draft) {
    switch (action.type) {
      case _constants.actionTypes.DOCUMENT_MODIFIED:
      case _constants.actionTypes.DOCUMENT_ADDED:
      case _constants.actionTypes.DOCUMENT_REMOVED:
      case _constants.actionTypes.LISTENER_RESPONSE:
      case _constants.actionTypes.UNSET_LISTENER:
        var groups = (0, _groupBy2.default)((0, _values2.default)(state.queries), function (c) {
          return c.storeAs || c.collection;
        });

        for (var storeAs in groups) {
          var updated = {};
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = groups[storeAs][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var item = _step.value;
              (0, _merge2.default)(updated, (0, _get2.default)(item, 'data', {}));
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          (0, _set2.default)(draft, ['composite', storeAs], updated);
        }

        return draft;

      default:
        return state;
    }
  });
}